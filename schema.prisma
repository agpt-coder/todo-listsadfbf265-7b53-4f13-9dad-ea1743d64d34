// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = 5
  previewFeatures             = ["postgresqlExtensions"]
  enable_experimental_decimal = true
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todoLists TodoList[]
  auditLogs AuditLog[]
}

model TodoList {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  tasks     Task[]
  auditLogs AuditLog[]
}

model Task {
  id        Int       @id @default(autoincrement())
  title     String
  dueDate   DateTime?
  priority  Int?
  notes     String?
  completed Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  todoListId Int
  todoList   TodoList @relation(fields: [todoListId], references: [id])

  auditLogs AuditLog[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  todoListId Int?
  todoList   TodoList? @relation(fields: [todoListId], references: [id])

  taskId Int?
  task   Task? @relation(fields: [taskId], references: [id])
}

enum Role {
  Admin
  User
}